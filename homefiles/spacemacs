;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     ansible
     auto-completion
     clojure
     dash
     dockerfile
     emacs-lisp
     git
     go
     javascript
     markdown
     org
     osx
     python
     restclient
     ;; ruby
     shell
     syntax-checking
     version-control
     yaml
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '(web-mode)
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '(rainbow-delimiters)
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; One of `vim', `emacs' or `hybrid'. Evil is always enabled but if the
   ;; variable is `emacs' then the `holy-mode' is enabled at startup. `hybrid'
   ;; uses emacs key bindings for vim's insert mode, but otherwise leaves evil
   ;; unchanged.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed.
   dotspacemacs-startup-banner 'official
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'."
   dotspacemacs-startup-lists '(bookmarks projects)
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark
                         zenburn)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 12
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; Default value is `cache'.
   dotspacemacs-auto-save-file-location 'cache
   ;; If non nil then `ido' replaces `helm' for some commands. For now only
   ;; `find-files' (SPC f f), `find-spacemacs-file' (SPC f e s), and
   ;; `find-contrib-file' (SPC f e c) are replaced.
   dotspacemacs-use-ido nil
   ;; If non nil, `helm' will try to miminimize the space it uses."
   dotspacemacs-helm-resize nil
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state nil
   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar nil
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native t
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode t
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one).
   dotspacemacs-highlight-delimiters nil
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init'.  You are free to put any
user code."
  (setq-default git-magit-status-fullscreen t)
  (setq-default ruby-version-manager 'rbenv)

  ;; Default to using full symbols for "*" and "#".
  (setq-default evil-symbol-word-search t)

  ;; Better margins
  (setq-default left-margin-width 1 right-margin-width 1)
  (set-window-buffer nil (current-buffer))

  (setq-default ace-jump-mode-gray-background nil)
  (setq-default ace-jump-mode-scope 'window))

(defun set-margins (cols)
  (interactive "nNumber of cols: ")
  (setq left-margin-width cols right-margin-width cols)
  (set-window-buffer nil (current-buffer)))

(defun toggle-margins ()
  (interactive)
  (if (> left-margin-width 1)
      (set-margins 1)
    (set-margins 120)))

(defun set-two-space-mode ()
  (setq-local evil-shift-width 2))

(defun yell-save-pinky ()
  "Yell at me about using vimmer crutches. Save the pinky!"
  (interactive)
  (message (propertize "Save your pinky! Use your SPC powers!" 'face '(:background "red"))))

(defun rebind-evil-keys ()
  "Rebind and unbind some evil keys for better ergonomics."

  ;; Rebind the macro key. Spacemacs and emacs like to use q for quit, and it'd
  ;; be nicer if it were a nop in non-evilified modes.
  (define-key evil-normal-state-map "q" nil)
  (define-key evil-normal-state-map "Q" 'evil-record-macro)

  ;; Don't use spacemacs's special "#" and "*" auto-highlight-symbol search
  ;; bindings. Prefer the evil defaults.
  (define-key evil-normal-state-map (kbd "*") 'evil-search-word-forward)
  (define-key evil-normal-state-map (kbd "#") 'evil-search-word-backward)

  ;; Use "SPC ;", not "M-;" for comments!
  (global-set-key (kbd "M-;") nil))

(defun magit-2-fixes ()
  (use-package magit
    :commands (magit-blame-mode)
    :config
    (progn
      (evil-make-overriding-map magit-blame-mode-map 'normal)
      (add-hook 'magit-blame-mode-hook 'evil-normalize-keymaps)
      (setq magit-branch-arguments (remove "--track" magit-branch-arguments))
      )))

(defun set-ret-js2 ()
  (local-set-key (kbd "RET") 'js2-line-break))

(defun set-ret-general ()
  (local-set-key (kbd "RET") 'indent-new-comment-line))

(defun golang-setup ()
  (use-package go-mode
    :init
    (progn
      ;; goimports is a better gofmt
      (setq-default gofmt-command "goimports")

      (evil-leader/set-key-for-mode 'go-mode
        "ofp" 'fill-paragraph
        "mgi" 'go-goto-imports)))
  (add-hook 'go-mode-hook 'set-ret-general))

(defun find-local-file (name)
  (let ((base (locate-dominating-file
               (buffer-file-name)
               name)))
    (when base
      (let ((path (expand-file-name (concat base name))))
        path))))

(defun set-checker-status (enable checker)
  (if enable
      (progn
        (message "%s dissabled" checker)
        (setq flycheck-disabled-checkers (remove checker flycheck-disabled-checkers)))
    (progn
      (message "%s enabled" checker)
      (add-to-list 'flycheck-disabled-checkers checker))))

(defun toggle-checker (checker)
  (interactive
   (let ((default (flycheck-get-checker-for-buffer)))
     (list (read-flycheck-checker "Toggle checker: "
                                  (when (flycheck-checker-get default 'command)
                                    default)
                                  'command))))
  (set-checker-status (memq checker flycheck-disabled-checkers) checker))

;; web-mode doesn't give us minor mode hooks for the various sub modes
;; (html, js, css) that it works with. This is fine for mixed mode files,
;; but most of the time we aren't operating on mixed mode files. So,
;; we create our own minor modes and hook them in when we know we're
;; in single-mode web-mode files.
(define-minor-mode web-minor-javascript nil)
(define-minor-mode web-minor-css nil)
(define-minor-mode web-minor-html nil)
(defun set-web-minor-modes ()
  (cond ((string-match "\\.jsx?\\'" buffer-file-name) (web-minor-javascript))
        ((string-match "\\.html\\'" buffer-file-name) (web-minor-html))
        ((string-match "\\.css\\'" buffer-file-name) (web-minor-css))))

(defun find-node-executable (name)
  (let ((path (find-local-file (concat "node_modules/.bin/" name))))
    (if path path name)))

(defun setup-javascript-checkers ()
  (setq-local flycheck-javascript-jscs-executable (find-node-executable "jscs"))
  (set-checker-status t 'javascript-jscs))

(defun web-setup ()
  ;; The html layer's web-mode layer is poo. Use our own configuration.
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.styl\\'" . css-mode))
  (setq-default web-mode-enable-auto-quoting nil)
  (add-hook 'web-mode-hook 'set-web-minor-modes)
  (add-hook 'web-minor-javascript-hook 'setup-javascript-checkers)
  (flycheck-add-mode 'javascript-jscs 'web-mode)
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jscs)))
  (defadvice web-mode-highlight-part (around tweak-jsx activate)
    (if (equal web-mode-content-type "jsx")
        (let ((web-mode-enable-part-face nil))
          ad-do-it)
      ad-do-it))
  (add-hook 'json-mode-hook
            (lambda ()
              (make-local-variable 'js-indent-level)
              (setq js-indent-level 2))))

(defun true-evil-org-eol-call (fun)
  (org-end-of-line)
  (funcall fun)
  (evil-append nil))

(defun setup-org-mode()
  (require 'org-install)
  (setq org-agenda-files (list "~/org/"))
  (evil-leader/set-key
    "oA" 'org-agenda
    ;; SPC-C-c?
    "oc" 'org-capture)
  (evil-define-key 'normal evil-org-mode-map "T"
    '(lambda ()
       (interactive)
       (true-evil-org-eol-call
        (lambda () (org-insert-todo-heading nil)))
       ))
  (evil-define-key 'normal evil-org-mode-map "o"
    (lambda ()
      (interactive)
      (true-evil-org-eol-call 'clever-insert-item))))

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
 This function is called at the very end of Spacemacs initialization after
layers configuration. You are free to put any user code."

  ;; spacemacs-dark has vars the same as normal text -- boo
  (custom-theme-set-faces
   'spacemacs-dark
   '(font-lock-constant-face ((((class color) (min-colors 89)) (:foreground "#BFDEA9"))))
   '(font-lock-variable-name-face ((((class color) (min-colors 89)) (:foreground "#859900")))))

  (require 'flycheck)

  (rebind-evil-keys)
  (magit-2-fixes)
  (golang-setup)
  (setup-org-mode)

  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(emacs-lisp-checkdoc)))

  (web-setup)

  ;; Quickly delete the contents of the minibuffer. This is the same as C-a
  ;; followed by M-k, but slightly more erognomic to type.
  (define-key minibuffer-local-map (kbd "C-c C-c") 'delete-minibuffer-contents)

  ;; Helm's builtin alternative to projectile's project switcher.
  (evil-leader/set-key "pF" 'helm-browse-project)

  ;; This should probably be in spacemacs. Need a way to pass the negative
  ;; argument for tools like helm-ag.
  (evil-leader/set-key "-" 'negative-argument)

  ;; Allow cursor beyond end of line. Necessary for clojure evaling sexps until
  ;; https://github.com/syl20bnr/spacemacs/issues/646 is fixed.
  (setq evil-move-cursor-back nil)

  ;; Suppress annoying startup messages that have to do with third-party packages redefining functions.
  (setq ad-redefinition-action 'accept)

  ;; Additional filemode detections.
  (add-to-list 'auto-mode-alist '("bashrc\\'" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.boot\\'" . clojure-mode))
  (add-to-list 'auto-mode-alist '("rest\\'" . restclient-mode))

  ;; Turn on line numbers for all programming modes.
  ;; (add-hook 'prog-mode-hook 'linum-mode)

  ;; Shift + return to open a URL.
  (global-set-key (kbd "<S-return>") 'browse-url-at-point)

  ;; Always start with evil-matchit mode. Spacemacs defaults to having it off.
  (global-evil-matchit-mode 1)

  ;; Start magit commit mode in insert mode.
  (add-hook 'git-commit-mode-hook 'evil-insert-state)

  ;; Two spaces for some langs.
  (dolist (hook '(enh-ruby-mode-hook
                  ruby-mode-hook
                  coffee-mode-hook
                  yaml-mode-hook
                  json-mode
                  css-mode
                  html-mode
                  web-mode))
    (add-hook hook 'set-two-space-mode))
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-css-indent-offset 2)
  (setq-default web-mode-code-indent-offset 2)

  ;; Turn on aggressive-indent for some modes by default
  (dolist (hook '(emacs-lisp-mode-hook
                  clojure-mode-hook
                  ))
    (add-hook hook #'aggressive-indent-mode))

  ;; Use marked as external markdown viewer.
  (setq markdown-open-command "marked")

  ;; Rebind the macro key. Spacemacs and emacs like to use q for quit, and it'd
  ;; be nicer if it were a nop in non-evilified modes.
  (define-key evil-normal-state-map "q" nil)
  (define-key evil-normal-state-map "Q" 'evil-record-macro)

  ;; Don't use spacemacs's special "#" and "*" auto-highlight-symbol search
  ;; bindings. Prefer the evil defaults.
  (define-key evil-normal-state-map (kbd "*") 'evil-search-word-forward)
  (define-key evil-normal-state-map (kbd "#") 'evil-search-word-backward)

  ;; Always follow symlinks when under version control. Otherwise every time
  ;; we edit the spacemacs file Emacs will yell at us.
  (setq vc-follow-symlinks t)

  ;; Don't use Ctrl-W for window commands. Prefer SPC w.
  (dolist (map '(evil-motion-state-map
                 evil-insert-state-map
                 evil-emacs-state-map))
    (define-key (eval map) "\C-w" 'yell-save-pinky))

  (add-hook 'prog-mode-hook
            (lambda ()
              (font-lock-add-keywords
               nil
               '(("\\<\\(FIXME\\|TODO\\|XXX\\)" 1 font-lock-warning-face t)))))

  ;; Custom SPC powers.
  (evil-leader/set-key
    "otm" 'toggle-margins
    "ofp" 'sp-indent-defun)

  ;; Override some keybindings.
  (evil-leader/set-key-for-mode 'cider-mode
    "msn" 'cider-repl-set-ns
    "ofb" 'cider-format-buffer)

  ;; Setup smartparens the way we like it.
  (require 'smartparens-config)
  (sp-use-paredit-bindings)
  (define-key smartparens-mode-map (kbd "C-)") 'sp-slurp-hybrid-sexp)
  (sp-pair "`" "`" :actions '(insert wrap autoskip))
  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ahs-case-fold-search nil)
 '(ahs-default-range (quote ahs-range-whole-buffer))
 '(ahs-idle-interval 0.25)
 '(ahs-idle-timer 0 t)
 '(ahs-inhibit-face-list nil)
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#3F3F3F" "#CC9393" "#7F9F7F" "#F0DFAF" "#8CD0D3" "#DC8CC3" "#93E0E3" "#DCDCCC"])
 '(compilation-message-face (quote default))
 '(cua-global-mark-cursor-color "#2aa198")
 '(cua-normal-cursor-color "#839496")
 '(cua-overwrite-cursor-color "#b58900")
 '(cua-read-only-cursor-color "#859900")
 '(fci-rule-color "#383838")
 '(highlight-changes-colors ("#FD5FF0" "#AE81FF"))
 '(highlight-symbol-colors
   (--map
    (solarized-color-blend it "#002b36" 0.25)
    (quote
     ("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2"))))
 '(highlight-symbol-foreground-color "#93a1a1")
 '(highlight-tail-colors
   (quote
    (("#49483E" . 0)
     ("#67930F" . 20)
     ("#349B8D" . 30)
     ("#21889B" . 50)
     ("#968B26" . 60)
     ("#A45E0A" . 70)
     ("#A41F99" . 85)
     ("#49483E" . 100))))
 '(hl-bg-colors
   (quote
    ("#7B6000" "#8B2C02" "#990A1B" "#93115C" "#3F4D91" "#00629D" "#00736F" "#546E00")))
 '(hl-fg-colors
   (quote
    ("#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36")))
 '(js2-strict-trailing-comma-warning nil)
 '(json-reformat:indent-width 2)
 '(magit-diff-arguments (quote ("--ignore-all-space" "--no-ext-diff")))
 '(magit-diff-use-overlays nil)
 '(max-lisp-eval-depth 10600)
 '(neo-theme (quote arrow))
 '(paradox-github-token t)
 '(pos-tip-background-color "#073642")
 '(pos-tip-foreground-color "#93a1a1")
 '(projectile-globally-ignored-directories
   (quote
    (".idea" ".eunit" ".git" ".hg" ".fslckout" ".bzr" "_darcs" ".tox" ".svn" "Godeps")))
 '(ring-bell-function (quote ignore) t)
 '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#073642" 0.2))
 '(sp-autoskip-closing-pair (quote always))
 '(sp-cancel-autoskip-on-backward-movement t)
 '(sp-ignore-modes-list (quote (enh-ruby-mode ruby-mode minibuffer-inactive-mode))))
