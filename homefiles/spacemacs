;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     ansible
     auto-completion
     clojure
     dash
     emacs-lisp
     git
     go
     html
     javascript
     markdown
     org
     osx
     python
     restclient
     ruby
     shell
     shell-scripts
     syntax-checking
     version-control
     )

   ;; List of additional packages that will be installed wihout being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '()
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '(rainbow-delimiters)
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; Either `vim' or `emacs'. Evil is always enabled but if the variable
   ;; is `emacs' then the `holy-mode' is enabled at startup.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed.
   dotspacemacs-startup-banner 'official
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'."
   dotspacemacs-startup-lists '(recents bookmarks projects)
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(zenburn)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 12
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil then `ido' replaces `helm' for some commands. For now only
   ;; `find-files' (SPC f f) is replaced.
   dotspacemacs-use-ido nil
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state nil
   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar nil
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native t
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 30
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode t
   ;; Select a scope to highlight delimiters. Possible value is `all',
   ;; `current' or `nil'. Default is `all'
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil
   )

  (setq-default git-magit-status-fullscreen t)
  (setq-default ruby-version-manager 'rbenv)

  ;; Default to using full symbols for "*" and "#".
  (setq-default evil-symbol-word-search t)
  )

(defun set-two-space-mode ()
  (setq-local evil-shift-width 2))

(defun start-evil-ex-subs ()
  "Start an evil-ex-mode substition."
  (interactive)
  (if (evil-visual-state-p)
      (evil-ex "'<,'>s/")
    (evil-ex "%s/")))

(defun auto-follow-helm-ag ()
  (when (boundp 'helm-source-do-ag)
    (helm-attrset 'follow 1 helm-source-do-ag)))

(defun yell-save-pinky ()
  "Yell at me about using vimmer crutches. Save the pinky!"
  (interactive)
  (message (propertize "Save your pinky! Use your SPC powers!" 'face '(:background "red"))))

(defun no-smartparens ()
  (smartparens-mode -1))

(defun dotspacemacs/config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."

  ;; Allow cursore beyond end of line. Necessary for clojure evaling sexps until
  ;; https://github.com/syl20bnr/spacemacs/issues/646 is fixed.
  (setq evil-move-cursor-back nil)

  ;; Suppress annoying startup messages that have to do with third-party packages redefining functions.
  (setq ad-redefinition-action 'accept)

  ;; Additional filemode detections.
  (add-to-list 'auto-mode-alist '("bashrc\\'" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.boot\\'" . clojure-mode))

  ;; Tell magit that we know what we're doing (ish).
  (setq magit-last-seen-setup-instructions "1.4.0")

  ;; Turn on line numbers for all programming modes.
  (add-hook 'prog-mode-hook 'linum-mode)

  ;; Shift + return to open a URL.
  (global-set-key (kbd "<S-return>") 'browse-url-at-point)

  ;; Always start with evil-matchit mode. Spacemacs defaults to having it off.
  (global-evil-matchit-mode 1)

  ;; Start magit commit mode in insert mode.
  (add-to-list 'evil-insert-state-modes 'git-commit-mode)

  ;; Two spaces for some langs.
  (dolist (hook '(enh-ruby-mode-hook
                  ruby-mode-hook
                  coffee-mode-hook
                  yaml-mode-hook
                  web-mode))
    (add-hook hook 'set-two-space-mode))
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-css-indent-offset 2)
  (setq-default web-mode-code-indent-offset 2)
  (setq-default js2-basic-offset 2)

  ;; Some modes are slow with smartparens.
  (dolist (hook '(enh-ruby-mode-hook
                  ruby-mode-hook))
    (add-hook hook 'no-smartparens))

  ;; Turn on aggressive-indent for some modes by default
  (dolist (hook '(emacs-lisp-mode-hook
                  clojure-mode-hook
                  yaml-mode-hook))
    (add-hook hook #'aggressive-indent-mode))

  ;; Use marked as external markdown viewer.
  (setq markdown-open-command "marked")

  ;; Tell js2-mode to shutup about trailing commas. They are fine when
  ;; using js compilers.
  (js2-strict-trailing-comma-warning nil)

  ;; Rebind the macro key. Spacemacs and emacs like to use q for quit, and it'd
  ;; be nicer if it were a nop in non-evilified modes.
  (define-key evil-normal-state-map "q" nil)
  (define-key evil-normal-state-map "Q" 'evil-record-macro)

  ;; Don't use spacemacs's special "#" and "*" auto-highlight-symbol search
  ;; bindings. Prefer the evil defaults.
  (define-key evil-normal-state-map (kbd "*") 'evil-search-word-forward)
  (define-key evil-normal-state-map (kbd "#") 'evil-search-word-backward)

  ;; Always follow symlinks when under version control. Otherwise every time
  ;; we edit the spacemacs file Emacs will yell at us.
  (setq vc-follow-symlinks t)

  ;; magit-blame-mode is read-only, so evilify it.
  (evilify magit-blame-mode magit-blame-map)

  ;; Use helm follow mode when using helm-ag, rather than having to C-c C-f
  ;; every time.
  (add-hook 'helm-before-initialize-hook 'auto-follow-helm-ag)

  ;; Don't use ex mode! Except for sub.
  (define-key evil-motion-state-map ":" 'yell-save-pink)
  (define-key evil-normal-state-map ":" 'yell-save-pinky)

  ;; Don't use Ctrl-W for window commands. Prefer SPC w.
  (dolist (map '(evil-motion-state-map
                 evil-insert-state-map
                 evil-emacs-state-map))
    (define-key (eval map) "\C-w" 'yell-save-pinky))

  ;; Custom SPC powers.
  (evil-leader/set-key
    "ofp" 'sp-indent-defun
    "os" 'start-evil-ex-subs)

  ;; Override some keybindings.
  (evil-leader/set-key-for-mode 'cider-mode
    "msn" 'cider-repl-set-ns
    "ofb" 'cider-format-buffer)
  (evil-leader/set-key-for-mode 'go-mode
    "ofp" 'fill-paragraph
    "mgi" 'go-goto-imports)

  ;; Fix GOPATH until https://github.com/syl20bnr/spacemacs/pull/1878 is fixed.
  (exec-path-from-shell-copy-env "GOPATH")

  ;; Setup smartparens the way we like it.
  (require 'smartparens-config)
  (sp-use-paredit-bindings))

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(neo-theme (quote arrow))
 '(projectile-globally-ignored-directories
   (quote
    (".idea" ".eunit" ".git" ".hg" ".fslckout" ".bzr" "_darcs" ".tox" ".svn" "Godeps")))
 '(ring-bell-function (quote ignore) t))
