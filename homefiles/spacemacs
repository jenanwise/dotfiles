;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     ansible
     auto-completion
     clojure
     dash
     dockerfile
     emacs-lisp
     git
     go
     javascript
     markdown
     nginx
     org
     osx
     puppet
     python
     react
     restclient
     ruby
     shell
     (spell-checking :variables spell-checking-enable-by-default nil)
     sql
     syntax-checking
     version-control
     yaml
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '(find-file-in-project
                                      dumb-jump)
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '(rainbow-delimiters)
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'. (default t)
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. (default t)
   dotspacemacs-check-for-update t
   ;; One of `vim', `emacs' or `hybrid'. Evil is always enabled but if the
   ;; variable is `emacs' then the `holy-mode' is enabled at startup. `hybrid'
   ;; uses emacs key bindings for vim's insert mode, but otherwise leaves evil
   ;; unchanged. (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'.
   ;; (default '(recents projects))
   dotspacemacs-startup-lists nil
   ;; Number of recent files to show in the startup buffer. Ignored if
   ;; `dotspacemacs-startup-lists' doesn't include `recents'. (default 5)
   dotspacemacs-startup-recent-list-size 5
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark
                         zenburn)
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 14
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m)
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ nil
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil then `ido' replaces `helm' for some commands. For now only
   ;; `find-files' (SPC f f), `find-spacemacs-file' (SPC f e s), and
   ;; `find-contrib-file' (SPC f e c) are replaced. (default nil)
   dotspacemacs-use-ido nil
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-micro-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar nil
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native t
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   ;; derivatives. If set to `relative', also turns on relative line numbers.
   ;; (default nil)
   dotspacemacs-line-numbers nil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode t
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters nil
   ;; If non nil advises quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup 'changed
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init'.  You are free to put almost
any user code here.  The exception is org related code, which should be placed
in `dotspacemacs/user-config'."

  (setq-default git-magit-status-fullscreen t)
  (setq-default ruby-version-manager 'rbenv)

  (setq split-height-threshold nil
        split-width-threshold 120)

  ;; Default to using full symbols for "*" and "#".
  (setq-default evil-symbol-word-search t)

  ;; Better margins
  (setq-default left-margin-width 1 right-margin-width 1)
  (set-window-buffer nil (current-buffer))

  (setq-default ace-jump-mode-gray-background nil)
  (setq-default ace-jump-mode-scope 'window))

(defun set-margins (cols)
  (interactive "nNumber of cols: ")
  (setq left-margin-width cols right-margin-width cols)
  (set-window-buffer nil (current-buffer)))

(defun toggle-margins ()
  (interactive)
  (if (> left-margin-width 1)
      (set-margins 1)
    (set-margins 120)))

(defun set-two-space-mode ()
  (setq-local evil-shift-width 2))

(defun yell-save-pinky ()
  "Yell at me about using vimmer crutches. Save the pinky!"
  (interactive)
  (message (propertize "Save your pinky! Use your SPC powers!" 'face '(:background "red"))))

(defun rebind-evil-keys ()
  "Rebind and unbind some evil keys for better ergonomics."

  ;; Rebind the macro key. Spacemacs and emacs like to use q for quit, and it'd
  ;; be nicer if it were a nop in non-evilified modes.
  (define-key evil-normal-state-map "q" nil)
  (define-key evil-normal-state-map "Q" 'evil-record-macro)

  ;; Don't use spacemacs's special "#" and "*" auto-highlight-symbol search
  ;; bindings. Prefer the evil defaults.
  (define-key evil-normal-state-map (kbd "*") 'evil-search-word-forward)
  (define-key evil-normal-state-map (kbd "#") 'evil-search-word-backward)

  ;; Use "SPC ;", not "M-;" for comments!
  (global-set-key (kbd "M-;") nil))

(defun set-ret-js2 ()
  (local-set-key (kbd "RET") 'js2-line-break))

(defun set-ret-general ()
  (local-set-key (kbd "RET") 'indent-new-comment-line))

(defun golang-setup ()
  (use-package go-mode
    :init
    (progn
      ;; goimports is a better gofmt
      (setq-default gofmt-command "goimports")))
  (add-hook 'go-mode-hook 'set-ret-general))

(defun clojure-setup ()
  (use-package cider
    :init
    (progn
      ;; Override some keybindings.
      (dolist (m '(clojure-mode clojurec-mode clojurescript-mode clojurex-mode))
        (spacemacs/set-leader-keys-for-major-mode m
          "sn" 'cider-repl-set-ns)))))

(defun cider-figwheel-repl ()
  (interactive)
  (save-some-buffers)
  (with-current-buffer (cider-current-repl-buffer)
    (goto-char (point-max))
    (insert "(require 'figwheel-sidecar.repl-api)
             (def _ (figwheel-sidecar.repl-api/start-figwheel!))
             (figwheel-sidecar.repl-api/cljs-repl)")
    (cider-repl-return)))

(defun find-local-file (name)
  (let ((base (locate-dominating-file
               (buffer-file-name)
               name)))
    (when base
      (let ((path (expand-file-name (concat base name))))
        path))))

(defun set-checker-status (enable checker)
  (if enable
      (progn
        (message "%s dissabled" checker)
        (setq flycheck-disabled-checkers (remove checker flycheck-disabled-checkers)))
    (progn
      (message "%s enabled" checker)
      (add-to-list 'flycheck-disabled-checkers checker))))

(defun toggle-checker (checker)
  (interactive
   (let ((default (flycheck-get-checker-for-buffer)))
     (list (read-flycheck-checker "Toggle checker: "
                                  (when (flycheck-checker-get default 'command)
                                    default)
                                  'command))))
  (set-checker-status (memq checker flycheck-disabled-checkers) checker))

(defun web-setup ()
  (setq-default
   js2-basic-offset 2
   js-indent-level 2
   css-indent-offset 2
   web-mode-markup-indent-offset 2
   web-mode-css-indent-offset 2
   web-mode-code-indent-offset 2
   web-mode-attr-indent-offset 2)
  (with-eval-after-load 'web-mode
    (add-to-list 'web-mode-comment-formats '("javascript" . "//" ))
    (add-to-list 'web-mode-comment-formats '("jsx" . "//" ))
    (add-to-list 'web-mode-indentation-params '("lineup-args" . nil))
    (add-to-list 'web-mode-indentation-params '("lineup-concats" . nil))
    (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil))))

(defun set-projectile-mode-line-local ()
  (lambda ()
    (when (file-remote-p default-directory)
      (setq-local projectile-mode-line "Projectile"))))

(defun fix-tramp-slow-projectile ()
  "Tramp (remote files) causes a lot of things to be slow. Fix that."
  (add-hook 'find-file-hook 'set-projectile-mode-line-local))

(defun true-evil-org-eol-call (fun)
  (org-end-of-line)
  (funcall fun)
  (evil-append nil))

(defun setup-org-mode()
  (require 'org-install)
  (setq org-agenda-files (list "~/org/"))
  (evil-leader/set-key
    "oA" 'org-agenda
    ;; SPC-C-c?
    "oc" 'org-capture)
  (evil-define-key 'normal evil-org-mode-map "T"
    '(lambda ()
       (interactive)
       (true-evil-org-eol-call
        (lambda () (org-insert-todo-heading nil)))
       ))
  (evil-define-key 'normal evil-org-mode-map "o"
    (lambda ()
      (interactive)
      (true-evil-org-eol-call 'clever-insert-item))))

(defun disable-smartparens ()
  (smartparens-mode 0))


(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration. You are free to put any user code."

  ;; temp fix for https://github.com/syl20bnr/spacemacs/issues/4538
  (setq helm-echo-input-in-header-line nil)

  (fix-tramp-slow-projectile)

  (require 'flycheck)

  (rebind-evil-keys)
  (golang-setup)
  (clojure-setup)
  (setup-org-mode)

  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(emacs-lisp-checkdoc)))

  (web-setup)

  ;; Quickly delete the contents of the minibuffer. This is the same as C-a
  ;; followed by M-k, but slightly more erognomic to type.
  (define-key minibuffer-local-map (kbd "C-c C-c") 'delete-minibuffer-contents)

  ;; Helm's builtin alternative to projectile's project switcher.
  (evil-leader/set-key "pF" 'helm-browse-project)

  ;; This should probably be in spacemacs. Need a way to pass the negative
  ;; argument for tools like helm-ag.
  (evil-leader/set-key "-" 'negative-argument)

  ;; Allow cursor beyond end of line. Necessary for clojure evaling sexps until
  ;; https://github.com/syl20bnr/spacemacs/issues/646 is fixed.
  (setq evil-move-cursor-back nil)

  ;; Suppress annoying startup messages that have to do with third-party packages redefining functions.
  (setq ad-redefinition-action 'accept)

  ;; Additional filemode detections.
  (add-to-list 'auto-mode-alist '("bashrc\\'" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.boot\\'" . clojure-mode))
  (add-to-list 'auto-mode-alist '("rest\\'" . restclient-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . react-mode))
  (add-to-list 'auto-mode-alist '("\\.html.template\\'" . web-mode))

  ;; dumb-mode experimentations
  (add-hook 'prog-mode-hook 'dumb-jump-mode)
  (define-key evil-normal-state-map (kbd "M-.") #'dumb-jump-go)
  (add-hook 'dumb-jump-mode-hook
            (lambda ()
              (add-to-list 'dumb-jump-find-rules
                           '(:type "type" :language "ruby"
                                   :regex "class\\s*JJJ\\s*"
                                   :tests ("class test")))
              (add-to-list 'dumb-jump-find-rules
                           '(:type "type" :language "ruby"
                                   :regex "module\\s*JJJ\\s*"
                                   :tests ("module test")))))

  ;; Shift + return to open a URL.
  (global-set-key (kbd "<S-return>") 'browse-url-at-point)

  ;; Always start with evil-matchit mode. Spacemacs defaults to having it off.
  (global-evil-matchit-mode 1)

  ;; Start magit commit mode in insert mode.
  (add-hook 'git-commit-mode-hook 'evil-insert-state)

  ;; Two spaces for some langs.
  (dolist (hook '(ruby-mode-hook
                  coffee-mode-hook
                  yaml-mode-hook
                  json-mode
                  css-mode
                  html-mode))
    (add-hook hook 'set-two-space-mode))

  ;; Turn on aggressive-indent for some modes by default
  (dolist (hook '(emacs-lisp-mode-hook
                  clojure-mode-hook))
    (add-hook hook #'aggressive-indent-mode))

  ;; Use marked as external markdown viewer.
  (setq markdown-open-command "marked")

  ;; Rebind the macro key. Spacemacs and emacs like to use q for quit, and it'd
  ;; be nicer if it were a nop in non-evilified modes.
  (define-key evil-normal-state-map "q" nil)
  (define-key evil-normal-state-map "Q" 'evil-record-macro)

  ;; Don't use spacemacs's special "#" and "*" auto-highlight-symbol search
  ;; bindings. Prefer the evil defaults.
  (define-key evil-normal-state-map (kbd "*") 'evil-search-word-forward)
  (define-key evil-normal-state-map (kbd "#") 'evil-search-word-backward)

  ;; Always follow symlinks when under version control. Otherwise every time
  ;; we edit the spacemacs file Emacs will yell at us.
  (setq vc-follow-symlinks t)

  ;; Don't use Ctrl-W for window commands. Prefer SPC w.
  (dolist (map '(evil-motion-state-map
                 evil-insert-state-map
                 evil-emacs-state-map))
    (define-key (eval map) "\C-w" 'yell-save-pinky))

  (add-hook 'prog-mode-hook
            (lambda ()
              (font-lock-add-keywords
               nil
               '(("\\<\\(FIXME\\|TODO\\|XXX\\)" 1 font-lock-warning-face t)))))

  ;; Custom SPC powers.
  (evil-leader/set-key
    "otm" 'toggle-margins
    "ofp" 'sp-indent-defun
    "cn" 'next-error
    "cp" 'previous-error)

  ;; Setup smartparens the way we like it.
  (require 'smartparens-config)
  (sp-use-paredit-bindings)
  (define-key smartparens-mode-map (kbd "C-)") 'sp-slurp-hybrid-sexp)
  (sp-pair "`" "`" :actions '(insert wrap autoskip))
  (add-hook 'clojure-mode-hook 'disable-smartparens)
  (add-hook 'clojure-mode-hook 'paredit-mode)
  (add-hook 'cider-repl-mode-hook 'disable-smartparens)
  (add-hook 'cider-repl-mode-hook 'paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'disable-smartparens)
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)

  (when (file-exists-p "~/.emacs_init_local.el")
    (load-file "~/.emacs_init_local.el"))
  )


;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cider-pprint-fn (quote puget))
 '(cider-repl-use-pretty-printing t)
 '(exec-path-from-shell-arguments (quote ("-l")))
 '(js2-strict-trailing-comma-warning nil)
 '(json-reformat:indent-width 2)
 '(projectile-git-command "fast-ls-files")
 '(projectile-globally-ignored-directories
   (quote
    (".idea" ".eunit" ".git" ".hg" ".fslckout" ".bzr" "_darcs" ".tox" ".svn" "Godeps" "node_modules" "vendor")))
 '(ring-bell-function (quote ignore))
 '(sp-autoskip-closing-pair (quote always))
 '(sp-cancel-autoskip-on-backward-movement t)
 '(sp-ignore-modes-list (quote (ruby-mode minibuffer-inactive-mode))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
