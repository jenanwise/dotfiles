## Basic Environment Vars
USERPATH=\
"./node_modules/.bin":\
"$HOME/bin":\
"$HOME/.local/bin":\
"$HOME/.emacs.d/bin":\
"$HOME/.cargo/bin"

if /usr/local/bin/brew --prefix 2>/dev/null; then
    BREWPREFIX="$(/usr/local/bin/brew --prefix)"
    BREWPATH="$BREWPREFIX/share/npm/bin":"$BREWPREFIX/opt/coreutils/libexec/gnubin:$BREWPREFIX/opt/python/libexec/bin"
    BREWBASHCOMPLETION="$BREWPREFIX/etc/bash_completion"
else
    BREWPATH=""
    BREWBASHCOMPLETION=""
fi

SYSPATH="/usr/local/bin"

export PATH=\
$USERPATH:\
$BREWPATH:\
$SYSPATH:\
$PATH

export EDITOR="emacs -nw"
export GIT_PS1_SHOWDIRTYSTATE=
export GIT_PS1_SHOWSTASHSTATE=1
export LESS="-i -g -M -R -x4 -X -f -F -z-1"
export LEIN_FAST_TRAMPOLINE=y

[ -z "$PS1" ] && return
##### Interactive setup below this point #####

## Bash settings

# check the window size after each command and, if necessary, update the values
# of LINES and COLUMNS.
shopt -s checkwinsize

shopt -s histappend
export HISTCONTROL=ignoreboth
export HISTSIZE=100000
export HISTFILESIZE=100000
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

# vi bindings
set -o vi

## Bash completion

# shellcheck source=/dev/null
#[[ -f ~/.bash_completion ]] && source ~/.bash_completion
if [[ -n "$BREWBASHCOMPLETION" && -f "$BREWBASHCOMPLETION" ]]; then
    # shellcheck source=/dev/null
    . "$BREWBASHCOMPLETION"
fi

# make "g" complete like "git"
complete -o bashdefault -o default -o nospace -F _git g 2>/dev/null \
    || complete -o default -o nospace -F _git g


## Prompt

if [ "$USER" = root ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    MAINCOLOR=34;
    if [ -n "`type -t __git_ps1`" ]; then
        PS1='\[\033[01;33m\]$(__git_ps1 "(%s) ")\[\033[01;${MAINCOLOR}m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]$ '
    else
        PS1='\[\033[01;${MAINCOLOR}m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]$ '
    fi
fi

## fasd/autojump
eval "$(fasd --init auto)"
unalias s
alias j="fasd_cd -d"
alias jj="fasd_cd -d -i"


## Aliasses

alias cdc="cd \`pwd -P\`"
alias cleanbak='find . -name "*.bak" -exec rm {} \;'
alias cleanpyc='find . -name "*.pyc" -exec rm {} \;'
alias cleanvim='rm $HOME/.viminfo'
alias g='git'
alias groot='cd "`git rev-parse --show-toplevel`"'
alias ipy='poetry run ipython --TerminalInteractiveShell.editing_mode=vi --InteractiveShell.colors=linux'
alias ll='ls -l'
alias node='env NODE_NO_READLINE=1 rlwrap node'
alias pgctl='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/log/postgres.log'


## Python

export PIPENV_VENV_IN_PROJECT=1

## Color support for `ls`

# BSD systems have only single-char flags, so -G replaces --color
# To check for this, we run "ls --version" and check the return status.
# BSD's ls will complain and give a non-zero exit status, but Linux's ls
# will happily return with status=0.

if [ "$TERM" != "dumb" ]; then
    if ls --version 2&>/dev/null; then
        eval "`dircolors -b`"
        alias ls='ls --color=auto'
    else
        alias ls='ls -G'
    fi
fi


## SSH

# Add all "id_*" private keys (ignores files ending in .pub) to the ssh agent.
for keyfile in `find ~/.ssh -name "id_rsa" -not -name "*.pub"`; do
    if [ "`ssh-add -l | grep "$keyfile" | wc -l`" = "0" ] ; then
        ssh-add "$keyfile"
    fi
done


## Private env settings

# shellcheck source=/dev/null
[[ -f ~/.bashrc_local ]] && source ~/.bashrc_local

# shellcheck source=/dev/null
[[ -f ~/.keys_env ]] && source ~/.keys_env

# shellcheck source=/dev/null
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
